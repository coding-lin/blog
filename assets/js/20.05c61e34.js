(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{455:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"typescript-中对象的类型标注"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-中对象的类型标注"}},[t._v("#")]),t._v(" TypeScript 中对象的类型标注")]),t._v(" "),s("p",[t._v("在 TypeScript 中我们也需要特殊的类型标注来描述对象类型，即 "),s("code",[t._v("interface")]),t._v("，你可以理解为它代表了这个对象对外提供的接口结构。")]),t._v(" "),s("p",[t._v("首先我们使用 interface 声明一个结构，然后使用这个结构来作为一个对象的类型标注即可：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IDescription")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  male"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" IDescription "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"linbudu"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("599")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  male"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("除了声明属性以及属性的类型以外，我们还可以对属性进行修饰，常见的修饰包括"),s("strong",[t._v("可选")]),t._v("（Optional） 与 "),s("strong",[t._v("只读")]),t._v("（Readonly） 两种。")]),t._v(" "),s("h3",{attrs:{id:"修饰接口属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰接口属性"}},[t._v("#")]),t._v(" 修饰接口属性")]),t._v(" "),s("p",[t._v("类似于上面的元组可选，在接口结构中同样通过 "),s("code",[t._v("?")]),t._v(" 来标记一个属性为可选：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IDescription")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  male"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  func"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" IDescription "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"linbudu"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("599")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  male"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无需实现 func 也是合法的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这种情况下，即使你在 "),s("code",[t._v("obj2")]),t._v(" 中定义了 "),s("code",[t._v("male")]),t._v(" 属性，但当你访问 "),s("code",[t._v("obj2.male")]),t._v(" 时，它的类型仍然会是 "),s("code",[t._v("boolean")]),t._v(" | "),s("code",[t._v("undefined")]),t._v("，因为这是我们自己定义的类型。")]),t._v(" "),s("p",[t._v("假设新增一个可选的函数类型属性，然后进行调用："),s("code",[t._v("obj2.func()")]),t._v("，此时将会产生一个类型报错："),s("strong",[t._v("不能调用可能是未定义的方法")]),t._v("。但可选属性标记不会影响你对这个属性进行赋值，如：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[t._v("obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("male "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("除了标记一个属性为可选以外，你还可以标记这个属性为只读："),s("code",[t._v("readonly")]),t._v("。它的作用是"),s("strong",[t._v("防止对象的属性被再次赋值")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IDescription")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("readonly")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" IDescription "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"linbudu"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("599")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 无法分配到 "name" ，因为它是只读属性')]),t._v("\nobj3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"林不渡"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以使用只读标记来避免数组和对象被错误修改，但 "),s("code",[t._v("readonly")]),t._v(" 并不会在实际运行时报错，因为 TypeScript 目前只能够帮助你在编译时做检查，类型信息在编译后都会被擦除。")]),t._v(" "),s("p",[t._v("其实在数组与元组层面也有着只读的修饰，但与对象类型有着两处不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("你只能将整个数组/元组标记为只读，而不能像对象那样标记某个属性为只读。")])]),t._v(" "),s("li",[s("p",[t._v("一旦被标记为只读，那这个只读数组/元组的类型上，将不再具有 "),s("code",[t._v("push")]),t._v("、"),s("code",[t._v("pop")]),t._v(" 等方法（即会修改原数组的方法），因此报错信息也将是"),s("strong",[t._v("类型 xxx 上不存在属性“push”这种")]),t._v("。这一实现的本质是只读数组与只读元组的类型实际上变成了 "),s("code",[t._v("ReadonlyArray")]),t._v("，而不再是 "),s("code",[t._v("Array")]),t._v("。")])])]),t._v(" "),s("p",[t._v("为了更好地区分 "),s("code",[t._v("Object")]),t._v("、"),s("code",[t._v("object")]),t._v(" 以及 "),s("code",[t._v("{}")]),t._v(" 这三个具有迷惑性的类型，我们再做下总结：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在任何时候都不要使用 "),s("code",[t._v("Object")]),t._v(" 以及类似的装箱类型(Boolean、Number、String、Symbol)。")])]),t._v(" "),s("li",[s("p",[t._v("当不确定某个变量的具体类型，但能确定它不是原始类型，可以使用 "),s("code",[t._v("object")]),t._v("。但更推荐使用 "),s("code",[t._v("Record<string, unknown>")]),t._v(" 或 "),s("code",[t._v("Record<string, any>")]),t._v(" 表示对象，"),s("code",[t._v("unknown[]")]),t._v(" 或 "),s("code",[t._v("any[]")]),t._v(" 表示数组，"),s("code",[t._v("(...args: any[]) => any")]),t._v(" 表示函数这样。")])]),t._v(" "),s("li",[s("p",[t._v("同样要避免使用 "),s("code",[t._v("{}")]),t._v("。"),s("code",[t._v("{}")]),t._v(" 意味着任何非 "),s("code",[t._v("null")]),t._v(" / "),s("code",[t._v("undefined")]),t._v(" 的值，从这个层面上看，使用它和使用 "),s("code",[t._v("any")]),t._v(" 一样恶劣。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);