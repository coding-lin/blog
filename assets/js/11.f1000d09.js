(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{450:function(t,a,s){"use strict";s.r(a);var r=s(1),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-数据类型及类型检测方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-数据类型及类型检测方法"}},[t._v("#")]),t._v(" js 数据类型及类型检测方法")]),t._v(" "),a("h3",{attrs:{id:"原始值-基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始值-基本数据类型"}},[t._v("#")]),t._v(" 原始值(基本数据类型)")]),t._v(" "),a("ul",[a("li",[t._v("number string boolean undefined null bigint symbol")])]),t._v(" "),a("h3",{attrs:{id:"对象-引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-引用类型"}},[t._v("#")]),t._v(" 对象(引用类型)")]),t._v(" "),a("ul",[a("li",[t._v("普通对象-Object 数组对象-Array 正则对象-RegExp 日期对象-Date 数学对象-Math 函数对象-Function")])]),t._v(" "),a("h3",{attrs:{id:"本质区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本质区别"}},[t._v("#")]),t._v(" 本质区别")]),t._v(" "),a("p",[t._v("在内存中的存储方式不同")]),t._v(" "),a("blockquote",[a("p",[t._v("基本数据类型是直接存储在栈中的简单数据段，占用空间小。")]),t._v(" "),a("p",[t._v("引用类型是存储在堆内存中，占用空间大。引用类型在栈中存储了指针，该指针指向堆中该实体的起始地址。")])]),t._v(" "),a("h3",{attrs:{id:"类型检测方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检测方法"}},[t._v("#")]),t._v(" 类型检测方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("typeof(用于基本数据类型的检测，typeof null 结果为 object)")])]),t._v(" "),a("li",[a("p",[t._v("instanceof(用于引用类型的检测，但对于基本数据类型是不生效的)")])]),t._v(" "),a("li",[a("p",[t._v("Object.prototype.toString.call")])]),t._v(" "),a("li",[a("p",[t._v("constructor(不能判断 undefined 和 null)")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);